from pathlib import Path

from dotenv import load_dotenv
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F

from app.parsing_vacancies import ApiHh, ApiHabr

BASE_DIR = Path(__file__).parent.parent
dot_env = Path(BASE_DIR, '.env')

load_dotenv(dotenv_path=dot_env)

bot_token = os.getenv('BOT_TOKEN')

bot = Bot(bot_token)
dp = Dispatcher()

hh_parser = ApiHh()
habr_parser = ApiHabr()


@dp.message(Command('start'))
async def start(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–±–∏—Ä–∞—é –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–æ —è –µ—â–µ —Ç—É–ø–æ–π. –ü–æ—ç—Ç–æ–º—É –Ω–µ –∑–ª–∏—Å—å.\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.")


@dp.message(Command('find'))
async def find_vacancy(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")

@dp.message()
async def process_job_search(message: types.Message):
    job_title = message.text
    await message.answer(f"–ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è: {job_title}...")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru
        hh_vacancies = await hh_parser.get_vacancy_from_api([job_title])
        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru:", hh_vacancies)  # –û—Ç–ª–∞–¥–∫–∞
        hh_cleaned = hh_parser.clean_vacancies_list(hh_vacancies)
        print(hh_cleaned)

        if not hh_cleaned:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = "\n\n".join(
            [
                f"üìå {vacancy['name_vacancy']}\n"
                f"üíº –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company']}\n"
                f"üåç –õ–æ–∫–∞—Ü–∏—è: {vacancy['location']}\n"
                f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç {vacancy['salary_from']} –¥–æ {vacancy['salary_to']}\n"
                f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é]({vacancy['url']})"
                for vacancy in hh_cleaned[:10]  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π
            ]
        )
        await message.answer(response, disable_web_page_preview=True)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(e)


async def main():
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
